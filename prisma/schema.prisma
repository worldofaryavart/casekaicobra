generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// You can still keep enums that make sense to be static:
enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

enum PaymentMethod {
  stripe
  paypal
  upi
  cod
}

enum PaymentStatus {
  initiated
  pending
  completed
  failed
  refunded
}

model Configuration {
  id              String      @id @default(cuid())
  // For custom orders, you might have extra details:
  width           Int?       
  height          Int?
  imageUrl        String?    // e.g. a design image or mockup
  croppedImageUrl String?

  // Replacing enums with relations:
  colorId         String?    
  color           TshirtColor? @relation(fields: [colorId], references: [id])
  sizeId          String?    
  size            TshirtSize?  @relation(fields: [sizeId], references: [id])
  fabricId        String?    
  fabric          TshirtFabric? @relation(fields: [fabricId], references: [id])

  // Indicates whether the configuration is custom or based on a shop product.
  isCustom        Boolean     @default(true)

  // For shop orders, you link to the product
  productId       String?     
  product         Product?    @relation(fields: [productId], references: [id])

  Order           Order[]
}

model User {
  id        String   @id @default(cuid())
  email     String
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                 String           @id @default(cuid())
  configurationId    String
  configuration      Configuration    @relation(fields: [configurationId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  userId             String
  amount             Float
  isPaid             Boolean          @default(false)
  status             OrderStatus      @default(awaiting_shipment)
  shippingAddress    ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId  String?
  billingAddressId   String?
  billingAddress     BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  paymentMethod      PaymentMethod    @default(stripe)
  paymentStatus      PaymentStatus    @default(initiated)
  paymentIntentId    String?          // from payment provider
  trackingId         String?          // for shipping tracking
  createdAt          DateTime         @default(now())
  updated            DateTime         @updatedAt

  @@index([userId])
  @@index([configurationId])
}

model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model BillingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model Product {
  id               String         @id @default(cuid())
  title            String
  description      String
  details          String
  // Make the field optional for now:
  categoryId       String?        
  category         Category?      @relation(fields: [categoryId], references: [id])
  realPrice        Float
  discountPrice    Float
  images           String[]       
  // Change these from enum arrays to many-to-many relations with the new models:
  availableSizes   TshirtSize[]   @relation("ProductSizes")
  availableFabrics TshirtFabric[] @relation("ProductFabrics")
  availableColors  TshirtColor[]  @relation("ProductColors")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  configurations   Configuration[]
}

model Category {
  id       String     @id @default(cuid())
  name     String
  products Product[]
}

/// The fields here include label, value and additional info such as a hex code.
model TshirtColor {
  id       String   @id @default(cuid())
  label    String
  value    String
  tw       String?  // optional additional field (e.g. Tailwind CSS class)
  hex      String?  // optional hexadecimal color code

  // Reverse relations:
  configurations Configuration[]
  products       Product[] @relation("ProductColors")
}

/// New model for tshirt sizes.
model TshirtSize {
  id       String   @id @default(cuid())
  label    String
  value    String

  // Reverse relations:
  configurations Configuration[]
  products       Product[] @relation("ProductSizes")
}

/// New model for tshirt fabrics.
model TshirtFabric {
  id       String   @id @default(cuid())
  label    String
  value    String
  price    Float?   // Optional extra cost for the fabric

  // Reverse relations:
  configurations Configuration[]
  products       Product[] @relation("ProductFabrics")
}
